networks:
  home:

services:

  # Movie searcher
  radarr:
    image: linuxserver/radarr:4.7.5
    container_name: radarr
    hostname: radarr
    depends_on:
      - qbittorrent
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1024M"
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
    networks:
      - home
    ports:
      - "4000:3000"
    restart: unless-stopped
    volumes:
      # Volume mounts from host system
      - "${DOWNLOADS_DIRECTORY}:/downloads"
      - "${MOVIE_DIRECTORY}:/movies"
      # Persistent volumes
      - ./storage/radarr/:/config

  # TV show searcher
  sonarr:
    image: linuxserver/sonarr:4.0.0-develop
    container_name: sonarr
    hostname: sonarr
    depends_on:
      - qbittorrent
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "2048M"
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
    networks:
      - home
    ports:
      - "4001:3001"
    restart: unless-stopped
    volumes:
      # Volume mounts from host system
      - "${DOWNLOADS_DIRECTORY}:/downloads"
      - "${TV1_DIRECTORY}:/tv1"
      - "${TV2_DIRECTORY}:/tv2"
      - "${TV3_DIRECTORY}:/tv3"
      - "${TV_KIDS_DIRECTORY}:/kids"
      # Persistent volumes
      - ./storage/sonarr/:/config

  # Music searcher
  lidarr:
    image: linuxserver/lidarr:1.2.6
    container_name: lidarr
    hostname: lidarr
    depends_on:
      - qbittorrent
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1024M"
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
    networks:
      - home
    ports:
      - "4002:3002"
    restart: unless-stopped
    volumes:
      # Volume mounts from host system
      - "${DOWNLOADS_DIRECTORY}:/downloads"
      - "${MUSIC_DIRECTORY}:/music"
      # Persistent volumes
      - ./storage/lidarr/:/config

  # Music Player
  navidrome:
    image: deluan/navidrome:0.49.3
    container_name: navidrome
    hostname: navidrome
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1024M"
    environment:
      ND_SCANSCHEDULE: "@every 24h"
      ND_LOGLEVEL: "info"
      ND_COVERARTPRIORITY: "album.*, embedded, external"
      ND_ARTISTARTPRIORITY: "artist.*, external"
      # External integrations
      ND_LASTFM_APIKEY: "${LASTFM_API_KEY}"
      ND_LASTFM_SECRET: "${LASTFM_SECRET}"
      ND_SPOTIFY_ID: "${SPOTIFY_CLIENT_ID}"
      ND_SPOTIFY_SECRET: "${SPOTIFY_CLIENT_SECRET}"
    networks:
      - home
    ports:
      - "4003:4533"
    restart: unless-stopped
    volumes:
      # Volume mounts from host system
      - "${MUSIC_DIRECTORY}:/music:ro"
      # Persistent volumes
      - ./storage/navidrome/:/data

  # Book searcher
  readarr:
    image: linuxserver/readarr:0.3.1-develop
    container_name: readarr
    hostname: readarr
    depends_on:
      - qbittorrent
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "512M"
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
    networks:
      - home
    ports:
      - "4004:3004"
    restart: unless-stopped
    volumes:
      # Volume mounts from host system
      - "${BOOKS_DIRECTORY}:/books"
      - "${DOWNLOADS_DIRECTORY}:/downloads"
      # Persistent volumes
      - ./storage/readarr/:/config

  # eBook management
  calibre:
    image: linuxserver/calibre:6.24.0
    container_name: calibre
    hostname: calibre
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1024M"
    environment:
      GUAC_USER: "abc" # Hardcoded value
      GUAC_PASS: "${CALIBRE_PASSWORD}"
      USERNAME: "abc" # Hardcoded value
      PASSWORD: "${CALIBRE_PASSWORD}"
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
    networks:
      - home
    ports:
      - "4005:8080"
      - "4006:8081"
    restart: unless-stopped
    volumes:
      # Volume mounts from host system
      - "${BOOK_COVERS_DIRECTORY}:/covers"
      # Persistent volumes
      - ./storage/calibre/:/config
      - "calibre_library_1:/${BOOK_LIBRARY_1}"
      - "calibre_library_2:/${BOOK_LIBRARY_2}"

  # Default credentials: admin/admin123
  calibre-web-1:
    image: linuxserver/calibre-web:0.6.20
    container_name: calibre-web-1
    hostname: calibre-web-1
    depends_on:
      - calibre
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "256M"
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
    networks:
      - home
    ports:
      - "4007:8083"
    restart: unless-stopped
    volumes:
      # Persistent volumes
      - "calibre_library_1:/${BOOK_LIBRARY_1}"
      - ./storage/calibre-web-1/:/config

  # Default credentials: admin/admin123
  calibre-web-2:
    image: linuxserver/calibre-web:0.6.20
    container_name: calibre-web-2
    hostname: calibre-web-2
    depends_on:
      - calibre
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "256M"
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
    networks:
      - home
    ports:
      - "4008:8083"
    restart: unless-stopped
    volumes:
      # Persistent volumes
      - "calibre_library_2:/${BOOK_LIBRARY_2}"
      - ./storage/calibre-web-2/:/config

  # Downloaded archive extracter
  unpackerr:
    image: golift/unpackerr:0.12.0
    container_name: unpackerr
    hostname: unpackerr
    depends_on:
      - lidarr
      - radarr
      - sonarr
      # - readarr
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "512M"
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
      # Sonarr Config
      UN_SONARR_0_URL: "http://sonarr:3001"
      UN_SONARR_0_API_KEY: "${SONARR_API_KEY}"
      UN_SONARR_0_PATHS_0: "/downloads/complete/sonarr"
      UN_SONARR_0_PROTOCOLS: "torrent,usenet"
      # Radarr Config
      UN_RADARR_0_URL: "http://radarr:3000"
      UN_RADARR_0_API_KEY: "${RADARR_API_KEY}"
      UN_RADARR_0_PATHS_0: "/downloads/complete/radarr"
      UN_RADARR_0_PROTOCOLS: "torrent,usenet"
      # Lidarr Config
      UN_LIDARR_0_URL: "http://lidarr:3002"
      UN_LIDARR_0_API_KEY: "${LIDARR_API_KEY}"
      UN_LIDARR_0_PATHS_0: "/downloads/complete/lidarr"
      UN_LIDARR_0_PROTOCOLS: "torrent,usenet"
      # Readarr Config
      UN_READARR_0_URL: "http://readarr:3004"
      UN_READARR_0_API_KEY: "${READARR_API_KEY}"
      UN_READARR_0_PATHS_0: "/downloads/complete/readarr"
      UN_READARR_0_PROTOCOLS: "torrent,usenet"
    networks:
      - home
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    user: "${PUID}:${PGID}"
    volumes:
      - "${DOWNLOADS_DIRECTORY}:/downloads"
      - ./storage/unpackerr/:/config

  # Subtitle downloader
  bazarr:
    build:
      context: .
      dockerfile: docker/bazarr/Dockerfile
      args:
        # Docker image versions
        BAZARR_VERSION: "1.2.4"
    container_name: bazarr
    hostname: bazarr
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "512M"
    depends_on:
      - radarr
      - sonarr
      - whisper
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
    networks:
      - home
    ports:
      - "4009:3009"
    restart: unless-stopped
    volumes:
      # Volume mounts from host system
      - "${MOVIE_DIRECTORY}:/movies"
      - "${TV1_DIRECTORY}:/tv1"
      - "${TV2_DIRECTORY}:/tv2"
      - "${TV3_DIRECTORY}:/tv3"
      - "${TV_KIDS_DIRECTORY}:/kids"
      # Persistent volumes
      - ./storage/bazarr/:/config

  # Automated Speech Recognition tool for subtitles
  whisper:
    image: onerahmet/openai-whisper-asr-webservice:v1.1.1
    container_name: whisper
    hostname: whisper
    environment:
      ASR_MODEL: base
      ASR_ENGINE: faster_whisper
    networks:
      - home
    ports:
      - "4012:9000"
    restart: unless-stopped

  # Video Game ROM Manager
  romm:
    build:
      context: .
      dockerfile: docker/romm/Dockerfile
      args:
        # Docker image versions
        ROMM_VERSION: "1.10"
    container_name: romm
    hostname: romm
    environment:
      CLIENT_ID: "${TWITCH_CLIENT_ID}"
      CLIENT_SECRET: "${TWITCH_CLIENT_SECRET}"
      STEAMGRIDDB_API_KEY: "${STEAMGRIDDB_API_KEY}"
    networks:
      - home
    ports:
      - "4013:80"
    restart: "unless-stopped"
    volumes:
      # Volume mounts from host system
      - "${ROMS_DIRECTORY}:/romm/library/roms:ro"
      # Persistent volumes
      - ./storage/romm/database/:/romm/database
      - ./storage/romm/resources/:/romm/resources

  # Indexer (Torrents + Usenet)
  prowlarr:
    image: linuxserver/prowlarr:1.7.4
    container_name: prowlarr
    hostname: prowlarr
    depends_on:
      - flaresolverr
      - lidarr
      - radarr
      - readarr
      - sonarr
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1024M" # High memory resourcing to allow stats page to load
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
    networks:
      - home
    ports:
      - "9696:9696"
    restart: unless-stopped
    volumes:
      # Persistent volumes
      - ./storage/prowlarr/:/config

  # Torrent downloader
  qbittorrent:
    build:
      context: .
      dockerfile: docker/qbittorrent/Dockerfile
      args:
        # Docker image versions
        QBITTORRENT_VERSION: "4.5.4"
        # Build arguments
        VUETORRENT_VERSION: "1.7.0"
    container_name: qbittorrent
    hostname: qbittorrent
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
      WEBUI_PORT: "9000"
    networks:
      - home
    ports:
      - "9000:9000"
      - "9001:9001"
      - "9001:9001/udp"
      # Additional ports to help connect to trackers/improve traffic
      - "6881-6889:6881-6889"
      - "6969:6969"
    restart: unless-stopped
    volumes:
      # Volume mounts from host system
      - "${DOWNLOADS_DIRECTORY}:/downloads"
      # Persistent volumes
      - ./storage/qbittorrent/:/config

  # Discord bot for requests
  doplarr:
    image: linuxserver/doplarr:3.6.2
    container_name: doplarr
    hostname: doplarr
    depends_on:
      - radarr
      - sonarr
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
    environment:
      # Integration configuration
      RADARR__URL: "http://radarr:3000"
      SONARR__URL: "http://sonarr:3001"
      RADARR__API: "${RADARR_API_KEY}"
      SONARR__API: "${SONARR_API_KEY}"
      # Discord configuration
      DISCORD__TOKEN: "${DISCORD_BOT_TOKEN}"
      DISCORD__MAX_RESULTS: 5
    networks:
      - home
    restart: unless-stopped

  # Cloudflare rate-limiter solver
  flaresolverr:
    image: ghcr.io/aeonlucid/flaresolverr:latest
    container_name: flaresolverr
    hostname: flaresolverr
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1024M"
    environment:
      LOG_LEVEL: info
      TZ: "${TIMEZONE}"
    networks:
      - home
    ports:
      - "8191:8191"
    restart: unless-stopped

  # Recipe manager (Tandoor, but container cannot be renamed)
  web_recipes:
    image: vabene1111/recipes:1.5.5
    container_name: web_recipes
    hostname: web_recipes
    depends_on:
      - postgres
    environment:
      TIMEZONE: "${TIMEZONE}"
      SECRET_KEY: "${TANDOOR_SECRET_KEY}"
      DB_ENGINE: "django.db.backends.postgresql"
      POSTGRES_HOST: "postgres"
      POSTGRES_PORT: "5432"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_DB: "${DB_NAME}"
      DEBUG: "0"
      SQL_DEBUG: "0"
    networks:
      - home
    restart: unless-stopped
    volumes:
      - ./storage/tandoor/nginx/conf.d/:/opt/recipes/nginx/conf.d
      - ./storage/tandoor/mediafiles/:/opt/recipes/mediafiles
      - ./storage/tandoor/staticfiles/:/opt/recipes/staticfiles

  # Recipe manager reverse-proxy/UI
  tandoor_ui:
    image: nginx:1.25.2-alpine
    container_name: tandoor_ui
    hostname: tandoor_ui
    depends_on:
      - web_recipes
    environment:
      TIMEZONE: "${TIMEZONE}"
      SECRET_KEY: "${TANDOOR_SECRET_KEY}"
    networks:
      - home
    ports:
      - "4010:80"
    restart: unless-stopped
    volumes:
      - ./storage/tandoor/nginx/conf.d/:/etc/nginx/conf.d:ro
      - ./storage/tandoor/mediafiles/:/media:ro
      - ./storage/tandoor/staticfiles/:/static:ro

  # Inventory management
  homebox:
    image: ghcr.io/hay-kot/homebox:v0.9.2
    container_name: homebox
    hostname: homebox
    environment:
      HBOX_LOG_LEVEL: "info"
      HBOX_LOG_FORMAT: "text"
      HBOX_WEB_MAX_UPLOAD_SIZE: "10"
      HBOX_OPTIONS_ALLOW_REGISTRATION: "false"
    networks:
      - home
    ports:
      - "4011:7745"
    restart: unless-stopped
    volumes:
      - ./storage/homebox/:/data/

  # Database
  postgres:
    image: postgres:15.4-alpine
    container_name: postgres
    hostname: postgres
    environment:
      TIMEZONE: "${TIMEZONE}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_DB: "${DB_NAME}"
    networks:
      - home
    restart: unless-stopped
    volumes:
      - ./storage/postgres/:/var/lib/postgresql/data

volumes:
  # Calibre libraries for multiple users
  calibre_library_1: { }
  calibre_library_2: { }
