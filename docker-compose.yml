networks:
  home:

services:

  # Homepage
  homarr:
    image: ghcr.io/ajnart/homarr:0.15.0 # https://github.com/ajnart/homarr/pkgs/container/homarr
    container_name: homarr
    hostname: homarr
    depends_on:
      - qbittorrent
      - radarr
      - sonarr
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1024M"
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
    networks:
      - home
    ports:
      - "4100:7575"
    restart: unless-stopped
    volumes:
      # Docker socket mount from host system
      - "${DOCKER_SOCKET}:/var/run/docker.sock"
      # Persistent volumes
      - ./storage/homarr/configs:/app/data/configs
      - ./storage/homarr/data:/data
      - ./storage/homarr/icons:/app/public/icons

  # Movie searcher
  radarr:
    image: linuxserver/radarr:nightly-version-5.4.0.8613
    container_name: radarr
    hostname: radarr
    depends_on:
      - qbittorrent
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1024M"
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
    healthcheck:
      interval: 5m
      retries: 3
      start_period: 2m
      test: "curl --silent --fail http://localhost:3000/ping | grep -q 'OK' || exit 1"
      timeout: 20s
    networks:
      - home
    ports:
      - "4000:3000"
    restart: unless-stopped
    volumes:
      # Volume mounts from host system
      - "${DOWNLOADS_DIRECTORY}:/downloads"
      - "${MOVIE_DIRECTORY}:/movies"
      # Persistent volumes
      - ./storage/radarr/:/config

  # TV show searcher
  sonarr:
    image: linuxserver/sonarr:version-4.0.1.929
    container_name: sonarr
    hostname: sonarr
    depends_on:
      - qbittorrent
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "2048M"
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
    healthcheck:
      interval: 5m
      retries: 3
      start_period: 2m
      test: "curl --silent --fail http://localhost:3001/ping | grep -q 'OK' || exit 1"
      timeout: 20s
    networks:
      - home
    ports:
      - "4001:3001"
    restart: unless-stopped
    volumes:
      # Volume mounts from host system
      - "${DOWNLOADS_DIRECTORY}:/downloads"
      - "${TV1_DIRECTORY}:/tv1"
      - "${TV2_DIRECTORY}:/tv2"
      - "${TV_TRASH_DIRECTORY}:/trash"
      - "${TV_KIDS_DIRECTORY}:/kids"
      # Persistent volumes
      - ./storage/sonarr/:/config

  # Quality profile manager for radarr/sonarr
  recyclarr:
    image: ghcr.io/recyclarr/recyclarr:6.0.2 # https://github.com/recyclarr/recyclarr/pkgs/container/recyclarr
    container_name: recyclarr
    hostname: recyclarr
    depends_on:
      - radarr
      - sonarr
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1024M"
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
      CRON_SCHEDULE: "@daily"
      # Sonarr Config
      SONARR_URL: "http://sonarr:3001"
      SONARR_API_KEY: "${SONARR_API_KEY}"
      # Radarr Config
      RADARR_URL: "http://radarr:3000"
      RADARR_API_KEY: "${RADARR_API_KEY}"
    healthcheck:
      interval: 5m
      retries: 3
      start_period: 2m
      test: "recyclarr -v || exit 1"
      timeout: 20s
    networks:
      - home
    restart: unless-stopped
    volumes:
      - ./storage/recyclarr:/config
      - ./docker/recyclarr/config/recyclarr.yml:/config/recyclarr.yml

  # Music searcher
  lidarr:
    image: linuxserver/lidarr:nightly-version-2.2.0.4045
    container_name: lidarr
    hostname: lidarr
    depends_on:
      - qbittorrent
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1024M"
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
    healthcheck:
      interval: 5m
      retries: 3
      start_period: 2m
      test: "curl --silent --fail http://localhost:3002/ping | grep -q 'OK' || exit 1"
      timeout: 20s
    networks:
      - home
    ports:
      - "4002:3002"
    restart: unless-stopped
    volumes:
      # Volume mounts from host system
      - "${DOWNLOADS_DIRECTORY}:/downloads"
      - "${MUSIC_DIRECTORY}:/music"
      # Persistent volumes
      - ./storage/lidarr/:/config

  # Music Player
  navidrome:
    image: deluan/navidrome:0.51.1
    container_name: navidrome
    hostname: navidrome
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1024M"
    environment:
      ND_SCANSCHEDULE: "@every 24h"
      ND_LOGLEVEL: "info"
      ND_COVERARTPRIORITY: "album.*, embedded, external"
      ND_ARTISTARTPRIORITY: "artist.*, external"
      # External integrations
      ND_LASTFM_APIKEY: "${LASTFM_API_KEY}"
      ND_LASTFM_SECRET: "${LASTFM_SECRET}"
      ND_SPOTIFY_ID: "${SPOTIFY_CLIENT_ID}"
      ND_SPOTIFY_SECRET: "${SPOTIFY_CLIENT_SECRET}"
    networks:
      - home
    ports:
      - "4003:4533"
    restart: unless-stopped
    volumes:
      # Volume mounts from host system
      - "${MUSIC_DIRECTORY}:/music:ro"
      # Persistent volumes
      - ./storage/navidrome/:/data

  # Book searcher
  readarr:
    image: linuxserver/readarr:nightly-version-0.3.19.2437
    container_name: readarr
    hostname: readarr
    depends_on:
      - qbittorrent
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "512M"
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
    healthcheck:
      interval: 5m
      retries: 3
      start_period: 2m
      test: "curl --silent --fail http://localhost:3004/ping | grep -q 'OK' || exit 1"
      timeout: 20s
    networks:
      - home
    ports:
      - "4004:3004"
    restart: unless-stopped
    volumes:
      # Volume mounts from host system
      - "${BOOKS_DIRECTORY}:/books"
      - "${DOWNLOADS_DIRECTORY}:/downloads"
      # Persistent volumes
      - ./storage/readarr/:/config

  # eBook management
  kavita:
    image: jvmilazz0/kavita:nightly-0.7.14.3
    container_name: kavita
    hostname: kavita
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
    volumes:
      # Volume mounts from host system
      - "${BOOKS_DIRECTORY}:/books"
      # Persistent volumes
      - ./storage/kavita/:/kavita/config
    ports:
      - "4005:5000"
    restart: unless-stopped

  # Downloaded archive extracter
  unpackerr:
    image: golift/unpackerr:0.13.1
    container_name: unpackerr
    hostname: unpackerr
    depends_on:
      - lidarr
      - radarr
      - sonarr
      - readarr
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "512M"
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
      # Sonarr Config
      UN_SONARR_0_URL: "http://sonarr:3001"
      UN_SONARR_0_API_KEY: "${SONARR_API_KEY}"
      UN_SONARR_0_PATHS_0: "/downloads/complete/sonarr"
      UN_SONARR_0_PROTOCOLS: "torrent,usenet"
      # Radarr Config
      UN_RADARR_0_URL: "http://radarr:3000"
      UN_RADARR_0_API_KEY: "${RADARR_API_KEY}"
      UN_RADARR_0_PATHS_0: "/downloads/complete/radarr"
      UN_RADARR_0_PROTOCOLS: "torrent,usenet"
      # Lidarr Config
      UN_LIDARR_0_URL: "http://lidarr:3002"
      UN_LIDARR_0_API_KEY: "${LIDARR_API_KEY}"
      UN_LIDARR_0_PATHS_0: "/downloads/complete/lidarr"
      UN_LIDARR_0_PROTOCOLS: "torrent,usenet"
      # Readarr Config
      UN_READARR_0_URL: "http://readarr:3004"
      UN_READARR_0_API_KEY: "${READARR_API_KEY}"
      UN_READARR_0_PATHS_0: "/downloads/complete/readarr"
      UN_READARR_0_PROTOCOLS: "torrent,usenet"
    networks:
      - home
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    user: "${PUID}:${PGID}"
    volumes:
      # Volume mounts from host system
      - "${DOWNLOADS_DIRECTORY}:/downloads"
      # Persistent volumes
      - ./storage/unpackerr/:/config

  # Subtitle downloader
  bazarr:
    build:
      context: .
      dockerfile: docker/bazarr/Dockerfile
      args:
        # Docker image versions
        BAZARR_VERSION: "1.4.1" # https://hub.docker.com/r/linuxserver/bazarr/tags
    container_name: bazarr
    hostname: bazarr
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "512M"
    depends_on:
      - radarr
      - sonarr
      - whisper
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
    healthcheck:
      interval: 5m
      retries: 3
      start_period: 2m
      test: "curl --silent --insecure --fail --output /dev/null 'http://localhost:3009/api/system/status?apikey=${BAZARR_API_KEY}' || exit 1"
      timeout: 20s
    networks:
      - home
    ports:
      - "4009:3009"
    restart: unless-stopped
    volumes:
      # Volume mounts from host system
      - "${MOVIE_DIRECTORY}:/movies"
      - "${TV1_DIRECTORY}:/tv1"
      - "${TV2_DIRECTORY}:/tv2"
      - "${TV_TRASH_DIRECTORY}:/trash"
      - "${TV_KIDS_DIRECTORY}:/kids"
      # Persistent volumes
      - ./storage/bazarr/:/config

  # Automated Speech Recognition tool for subtitles
  whisper:
    image: onerahmet/openai-whisper-asr-webservice:v1.3.0
    container_name: whisper
    hostname: whisper
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "2048M"
    environment:
      ASR_MODEL: "small.en"
      ASR_ENGINE: "faster_whisper"
    networks:
      - home
    ports:
      - "4012:9000"
    restart: unless-stopped

  # Video Game ROM Manager
  romm:
    image: zurdi15/romm:2.3.1
    container_name: romm
    hostname: romm
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1024M"
    environment:
      # Database config
      ROMM_DB_DRIVER: "sqlite"
      # External systems config
      IGDB_CLIENT_ID: "${TWITCH_CLIENT_ID}"
      IGDB_CLIENT_SECRET: "${TWITCH_CLIENT_SECRET}"
      STEAMGRIDDB_API_KEY: "${STEAMGRIDDB_API_KEY}"
      # Authentication config
      ROMM_AUTH_ENABLED: "true"
      ROMM_AUTH_SECRET_KEY: "${ROMM_SECRET_KEY}"
      ROMM_AUTH_USERNAME: "${ADMIN_USERNAME}"
      ROMM_AUTH_PASSWORD: "${ROMM_ADMIN_PASSWORD}"
      ENABLE_EXPERIMENTAL_REDIS: "true"
      REDIS_HOST: "romm-users-cache"
      REDIS_PORT: "6379"
    healthcheck:
      interval: 5m
      retries: 3
      start_period: 2m
      test: "curl --silent --fail http://localhost:8080/api/heartbeat | grep -q 'VERSION' || exit 1"
      timeout: 20s
    networks:
      - home
    ports:
      - "4013:8080"
    restart: "unless-stopped"
    volumes:
      # Volume mounts from host system
      - "${ROMS_DIRECTORY}:/romm/library/roms:ro"
      - "./docker/romm/config/config.yml:/romm/config.yml"
      # Persistent volumes
      - ./storage/romm/database/:/romm/database
      - ./storage/romm/resources/:/romm/resources
      - ./storage/romm/logs:/romm/logs

  # Redis cache for RomM users
  romm_users_cache:
    image: redis:7.2.3-alpine
    container_name: romm_users_cache
    hostname: romm-users-cache
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"
    healthcheck:
      interval: 5m
      retries: 3
      start_period: 2m
      test: "redis-cli ping || exit 1"
      timeout: 20s
    networks:
      - home
    ports:
      - "6379:6379"
    restart: unless-stopped
    volumes:
      # Persistent volumes
      - ./storage/romm_users_cache/:/data

  # Indexer (Torrents + Usenet)
  prowlarr:
    image: linuxserver/prowlarr:nightly-version-1.14.1.4289
    container_name: prowlarr
    hostname: prowlarr
    depends_on:
      - flaresolverr
      - lidarr
      - radarr
      - readarr
      - sonarr
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1024M" # High memory resourcing to allow stats page to load
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
    healthcheck:
      interval: 5m
      retries: 3
      start_period: 2m
      test: "curl --silent --fail http://localhost:9696/ping | grep -q 'OK' || exit 1"
      timeout: 20s
    networks:
      - home
    ports:
      - "9696:9696"
    restart: unless-stopped
    volumes:
      # Persistent volumes
      - ./storage/prowlarr/:/config

  # Torrent downloader
  qbittorrent:
    build:
      context: .
      dockerfile: docker/qbittorrent/Dockerfile
      args:
        # Docker image versions
        QBITTORRENT_VERSION: "4.6.3" # https://hub.docker.com/r/linuxserver/qbittorrent/tags
        # Build arguments
        VUETORRENT_VERSION: "2.7.0" # https://github.com/WDaan/VueTorrent/releases/
    container_name: qbittorrent
    hostname: qbittorrent
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "2048M"
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TIMEZONE}"
      WEBUI_PORT: "9000"
    healthcheck:
      interval: 5m
      retries: 3
      start_period: 2m
      test: "curl --silent --fail http://localhost:9000/api/v2/app/version || exit 1"
      timeout: 20s
    networks:
      - home
    ports:
      - "9000-9002:9000-9002"
    restart: unless-stopped
    volumes:
      # Volume mounts from host system
      - "${DOWNLOADS_DIRECTORY}:/downloads"
      # Persistent volumes
      - ./storage/qbittorrent/:/config

  # Discord bot for requests
  doplarr:
    image: linuxserver/doplarr:3.6.3
    container_name: doplarr
    hostname: doplarr
    depends_on:
      - radarr
      - sonarr
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
    environment:
      # Integration configuration
      RADARR__URL: "http://radarr:3000"
      SONARR__URL: "http://sonarr:3001"
      RADARR__API: "${RADARR_API_KEY}"
      SONARR__API: "${SONARR_API_KEY}"
      # Discord configuration
      DISCORD__TOKEN: "${DISCORD_BOT_TOKEN}"
      DISCORD__MAX_RESULTS: 5
    networks:
      - home
    restart: unless-stopped

  # Cloudflare rate-limiter solver
  flaresolverr:
    image: ghcr.io/aeonlucid/flaresolverr:v3.3.2-hotfix # https://github.com/aeonlucid/FlareSolverr/pkgs/container/flaresolverr
    container_name: flaresolverr
    hostname: flaresolverr
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1024M"
    environment:
      LOG_LEVEL: info
      TZ: "${TIMEZONE}"
    healthcheck:
      interval: 5m
      retries: 3
      start_period: 2m
      test: "curl --silent --fail http://localhost:8191/ | grep -q 'FlareSolverr is ready' || exit 1"
      timeout: 20s
    networks:
      - home
    ports:
      - "8191:8191"
    restart: unless-stopped

  # Recipe manager (Tandoor, but container cannot be renamed)
  web_recipes:
    image: vabene1111/recipes:1.5.13
    container_name: web_recipes
    hostname: web_recipes
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1024M"
    environment:
      TZ: "${TIMEZONE}"
      SECRET_KEY: "${TANDOOR_SECRET_KEY}"
      DB_ENGINE: "django.db.backends.postgresql"
      POSTGRES_HOST: "postgres"
      POSTGRES_PORT: "5432"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_DB: "${DB_NAME}"
      DEBUG: "0"
      SQL_DEBUG: "0"
    networks:
      - home
    restart: unless-stopped
    volumes:
      - ./storage/tandoor/nginx/conf.d/:/opt/recipes/nginx/conf.d
      - ./storage/tandoor/mediafiles/:/opt/recipes/mediafiles
      - ./storage/tandoor/staticfiles/:/opt/recipes/staticfiles

  # Recipe manager reverse-proxy/UI
  tandoor_ui:
    image: nginx:1.25.4-alpine
    container_name: tandoor_ui
    hostname: tandoor-ui
    depends_on:
      - web_recipes
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1024M"
    environment:
      TIMEZONE: "${TIMEZONE}"
      SECRET_KEY: "${TANDOOR_SECRET_KEY}"
    healthcheck:
      interval: 5m
      retries: 3
      start_period: 2m
      test: "curl --silent --fail http://localhost || exit 1"
      timeout: 20s
    networks:
      - home
    ports:
      - "4010:80"
    restart: unless-stopped
    volumes:
      - ./storage/tandoor/nginx/conf.d/:/etc/nginx/conf.d:ro
      - ./storage/tandoor/mediafiles/:/media:ro
      - ./storage/tandoor/staticfiles/:/static:ro

  # Inventory management
  homebox:
    image: ghcr.io/hay-kot/homebox:v0.10.3 # https://github.com/hay-kot/homebox/pkgs/container/homebox
    container_name: homebox
    hostname: homebox
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
    environment:
      HBOX_LOG_LEVEL: "info"
      HBOX_LOG_FORMAT: "text"
      HBOX_WEB_MAX_UPLOAD_SIZE: "10"
      HBOX_OPTIONS_ALLOW_REGISTRATION: "false"
    healthcheck:
      interval: 5m
      retries: 3
      start_period: 2m
      test: "wget -q --no-verbose --tries=1 --output-document - http://localhost:7745/api/v1/status | grep -q '\"health\":true' || exit 1"
      timeout: 20s
    networks:
      - home
    ports:
      - "4011:7745"
    restart: unless-stopped
    volumes:
      - ./storage/homebox/:/data/

  # Daily journal
  dailytxt:
    image: phitux/dailytxt:1.0.13
    container_name: dailytxt
    hostname: dailytxt
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"
    environment:
      USER_UID: "${PUID}"
      USER_GID: "${PGID}"
      TZ: "${TIMEZONE}"
      PORT: "8765"
      SECRET_KEY: "${DAILYTXT_SECRET_KEY}"
      ALLOW_REGISTRATION: "false"
      DATA_INDENT: "2"
      JWT_EXP_DAYS: "60"
      ENABLE_UPDATE_CHECK: "false"
    healthcheck:
      interval: 5m
      retries: 3
      start_period: 2m
      test: "wget -q --no-verbose --tries=1 -O - http://localhost:8765 | grep -q 'DailyTxT' || exit 1"
      timeout: 20s
    networks:
      - home
    ports:
      - "4015:8765"
    restart: unless-stopped
    volumes:
      - ./storage/dailytxt/:/app/data/

  # Log aggregator
  dozzle:
    build:
      context: .
      dockerfile: docker/dozzle/Dockerfile
      args:
        # Docker image versions
        DEBIAN_VERSION: "12.5" # https://hub.docker.com/_/debian/tags
        DOZZLE_VERSION: "v6.2.4" # https://hub.docker.com/r/amir20/dozzle/tags
        # Build arguments
        ADMIN_EMAIL_ADDRESS: "${ADMIN_EMAIL_ADDRESS}"
        ADMIN_USERNAME: "${ADMIN_USERNAME}"
        ADMIN_PASSWORD: "${DOZZLE_PASSWORD}"
    container_name: dozzle
    hostname: dozzle
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"
    environment:
      DOZZLE_AUTH_PROVIDER: "simple"
    networks:
      - home
    ports:
      - "4014:8080"
    restart: unless-stopped
    volumes:
      # Docker socket mount from host system
      - "${DOCKER_SOCKET}:/var/run/docker.sock"

  # Database
  postgres:
    image: postgres:15.5-alpine
    container_name: postgres
    hostname: postgres
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1024M"
    environment:
      TIMEZONE: "${TIMEZONE}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_DB: "${DB_NAME}"
    healthcheck:
      interval: 5m
      retries: 3
      start_period: 2m
      test: "pg_isready -d db_prod || exit 1"
      timeout: 20s
    networks:
      - home
    restart: unless-stopped
    volumes:
      - ./storage/postgres/:/var/lib/postgresql/data
