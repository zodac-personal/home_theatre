networks:
  home_pi:
    name: home_pi
    driver: bridge

services:

  # Reverse proxy
  apache:
    build: 
      context: .
      dockerfile: docker/apache/Dockerfile
      args:
        # Docker image version
        APACHE_VERSION: "2.4.59" # https://hub.docker.com/_/httpd
        # Build arguments
        ADMIN_EMAIL_ADDRESS: "${ADMIN_EMAIL_ADDRESS?[apache] Admin email address missing}"
    container_name: apache
    hostname: apache
    environment:
      # Base config
      PGID: "${PGID:?Group ID missing}"
      PUID: "${PUID:?User ID missing}"
      TZ: "${TIMEZONE:?Timezone not set}"
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 30s
      test: "wget -q --spider http://localhost/ 2>&1 || exit 1"
      timeout: 5s
    networks:
      - home_pi
    ports:
      - "80:80"
    restart: unless-stopped

  # Monitoring and alerting
  uptime_kuma:
    image: louislam/uptime-kuma:1.23.13-alpine
    container_name: uptime_kuma
    hostname: uptime-kuma
    environment:
      # Base config
      PGID: "${PGID:?Group ID missing}"
      PUID: "${PUID:?User ID missing}"
      TZ: "${TIMEZONE:?Timezone not set}"
    networks:
      - home_pi
    ports:
      - "3001:3001"
    restart: unless-stopped
    volumes:
      # Persistent volumes
      - ./storage/uptime_kuma/:/app/data

  # Identity platform (authentication and SSO)
  authentik:
    image: ghcr.io/goauthentik/server:2024.4.2 # https://github.com/goauthentik/authentik/pkgs/container/server
    container_name: authentik
    hostname: authentik
    depends_on:
      authentik-cache:
          condition: service_healthy
      authentik-db:
          condition: service_healthy
    command: server
    environment:
      # Base config
      TZ: "${TIMEZONE:?Timezone not set}"
      # Database/cache config
      AUTHENTIK_REDIS__HOST: authentik-cache
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__NAME: "${AUTHENTIK_DB_NAME:?[authentik] Database name missing}"
      AUTHENTIK_POSTGRESQL__PASSWORD: "${AUTHENTIK_DB_PASSWORD:?[authentik] Database password missing}"
      AUTHENTIK_POSTGRESQL__PORT: "${AUTHENTIK_DB_PORT:?[authentik] Database port missing}"
      AUTHENTIK_POSTGRESQL__USER: "${AUTHENTIK_DB_USER?[authentik] Database user missing}"
      # Authentik config
      AUTHENTIK_BOOTSTRAP_PASSWORD: "admin"
      AUTHENTIK_SECRET_KEY: "${AUTHENTIK_SECRET_KEY:?[authentik] Authentik secret key missing}"
    networks:
      - home_pi
    ports:
      - "${AUTHENTIK_UI_PORT:?[authentik] UI port not set}:9000"
    restart: unless-stopped
    volumes:
      # Logos to be copied to /media/public/application-icons/, but would be overwritten by volumes below, so must be done manually
      - ./storage/authentik/media/:/media
      - ./storage/authentik/certs/:/certs
      - ./storage/authentik/templates/:/templates

  # Worker node for Authentik
  authentik-worker:
    image: ghcr.io/goauthentik/server:2024.4.2 # https://github.com/goauthentik/authentik/pkgs/container/server
    container_name: authentik-worker
    hostname: authentik-worker
    command: worker
    depends_on:
      authentik:
          condition: service_healthy
      authentik-cache:
          condition: service_healthy
      authentik-db:
          condition: service_healthy
    environment:
      # Base config
      TZ: "${TIMEZONE:?Timezone not set}"
      # Database/cache config
      AUTHENTIK_REDIS__HOST: authentik-cache
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__NAME: "${AUTHENTIK_DB_NAME:?[authentik-worker] Database name missing}"
      AUTHENTIK_POSTGRESQL__PASSWORD: "${AUTHENTIK_DB_PASSWORD:?[authentik-worker] Database password missing}"
      AUTHENTIK_POSTGRESQL__PORT: "${AUTHENTIK_DB_PORT:?[authentik-worker] Database port missing}"
      AUTHENTIK_POSTGRESQL__USER: "${AUTHENTIK_DB_USER?[authentik-worker] Database user missing}"
      # Authentik config
      AUTHENTIK_SECRET_KEY: "${AUTHENTIK_SECRET_KEY:?[authentik-worker] Authentik secret key missing}"
    networks:
      - home_pi
    restart: unless-stopped
    user: root # Removing this line prevents the worker from fixing the permissions on the mounted folders
    volumes:
      - ./storage/authentik/media/:/media
      - ./storage/authentik/certs/:/certs
      - ./storage/authentik/templates/:/templates

  # Cache for Authentik
  authentik-cache:
    image: redis:7.2.5-alpine
    container_name: authentik-cache
    hostname: authentik-cache
    command: --save 60 1 --loglevel warning
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 30s
      test: "redis-cli ping || exit 1"
      timeout: 5s
    networks:
      - home_pi
    restart: unless-stopped
    volumes:
      - ./storage/authentik-cache/:/data

  # Database for Authentik
  authentik-db:
    image: postgres:12.19-alpine
    container_name: authentik-db
    hostname: authentik-db
    environment:
      # Base config
      TIMEZONE: "${TIMEZONE:?Timezone not set}"
      # Database config
      PGPORT: "${AUTHENTIK_DB_PORT:?[authentik-db] Database port missing}"
      POSTGRES_DB: "${AUTHENTIK_DB_NAME:?[authentik-db] Database name missing}"
      POSTGRES_PASSWORD: "${AUTHENTIK_DB_PASSWORD:?[authentik-db] Database password missing}"
      POSTGRES_USER: "${AUTHENTIK_DB_USER?[authentik-db] Database user missing}"
      # Next 3 variables needed to avoid "FATAL role 'root' does not exist" error
      PGDATABASE: "${AUTHENTIK_DB_NAME:?[authentik-db] Database name missing}"
      PGPASSWORD: "${AUTHENTIK_DB_PASSWORD:?[authentik-db] Database password missing}"
      PGUSER: "${AUTHENTIK_DB_USER?[authentik-db] Database user missing}"
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 30s
      test: "pg_isready -d db_prod || exit 1"
      timeout: 5s
    networks:
      - home_pi
    restart: unless-stopped
    volumes:
      - ./storage/authentik-db/:/var/lib/postgresql/data

  # WiFi/LAN network scanner
  netalert:
    image: jokobsk/netalertx:24.5.9
    container_name: netalert
    hostname: netalert
    environment:
      # Base config
      TZ: "${TIMEZONE:?Timezone not set}"
      # UI config
      PORT: "${NETALERT_UI_PORT:?[netalert] UI port not set}"
    expose:
      - "${NETALERT_UI_PORT:?[netalert] UI port not set}"
    network_mode: host # Cannot be run in bridged mode, as it needs visibility of the network
    restart: unless-stopped
    volumes:
      - ./storage/net-alert/config/:/app/config
      - ./storage/net-alert/db/:/app/db
