networks:
  home_pi:
    name: home_pi
    driver: bridge

services:

  # Reverse proxy
  apache:
    build: 
      context: .
      dockerfile: docker/apache/Dockerfile
      args:
        # Docker image version
        APACHE_VERSION: "2.4.59" # https://hub.docker.com/_/httpd
        # Build arguments
        ADMIN_EMAIL_ADDRESS: "${ADMIN_EMAIL_ADDRESS?[apache] Admin email address missing}"
    container_name: apache
    hostname: apache
    environment:
      # Base config
      TZ: "${TIMEZONE:?Timezone missing}"
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 30s
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/" ]
      timeout: 5s
    networks:
      - home_pi
    ports:
      - "80:80"
    restart: unless-stopped
    user: "${PUID_ROOT:?User ID missing}:${PGID_ROOT:?Group ID missing}"

  # Monitoring and alerting
  uptime-kuma:
    image: louislam/uptime-kuma:1.23.13-alpine
    container_name: uptime-kuma
    hostname: uptime-kuma
    environment:
      # Base config
      TZ: "${TIMEZONE:?Timezone missing}"
    labels:
      # Uptime-Kuma monitor config
      kuma.{{container_name}}.http.name: "Uptime Kuma (Status Page)"
      kuma.{{container_name}}.http.url: "${UPTIME_KUMA_MONITOR_URL:?[uptime-kuma] Monitor URL missing}"
    networks:
      - home_pi
    ports:
      - "3001:3001"
    restart: unless-stopped
    user: "${PUID_ROOT:?User ID missing}:${PGID_ROOT:?Group ID missing}"
    volumes:
      # Persistent volumes
      - ./storage/uptime-kuma/:/app/data

  # Identity platform (authentication and SSO)
  authentik:
    image: ghcr.io/goauthentik/server:2024.4.2 # https://github.com/goauthentik/authentik/pkgs/container/server
    container_name: authentik
    hostname: authentik
    depends_on:
      authentik-cache:
          condition: service_healthy
      authentik-db:
          condition: service_healthy
    command: server
    environment:
      # Base config
      TZ: "${TIMEZONE:?Timezone missing}"
      # Database/cache config
      AUTHENTIK_REDIS__HOST: authentik-cache
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__NAME: "${AUTHENTIK_DB_NAME:?[authentik] Database name missing}"
      AUTHENTIK_POSTGRESQL__PASSWORD: "${AUTHENTIK_DB_PASSWORD:?[authentik] Database password missing}"
      AUTHENTIK_POSTGRESQL__PORT: "${AUTHENTIK_DB_PORT:?[authentik] Database port missing}"
      AUTHENTIK_POSTGRESQL__USER: "${AUTHENTIK_DB_USER?[authentik] Database user missing}"
      # Authentik config
      AUTHENTIK_BOOTSTRAP_PASSWORD: "admin"
      AUTHENTIK_SECRET_KEY: "${AUTHENTIK_SECRET_KEY:?[authentik] Authentik secret key missing}"
    labels:
      # Uptime-Kuma monitor config
      kuma.{{container_name}}.http.name: "Authentik (Identity Platform)"
      kuma.{{container_name}}.http.url: "${AUTHENTIK_MONITOR_URL:?[authentik] Monitor URL missing}"
    networks:
      - home_pi
    ports:
      - "${AUTHENTIK_UI_PORT:?[authentik] UI port missing}:9000"
    restart: unless-stopped
    user: "${PUID_ROOT:?User ID missing}:${PGID_ROOT:?Group ID missing}"
    volumes:
      # Persistent volumes
      - ./storage/authentik/media/:/media
      - ./storage/authentik/certs/:/certs
      - ./storage/authentik/templates/:/templates

  # Worker node for Authentik
  authentik-worker:
    image: ghcr.io/goauthentik/server:2024.4.2 # https://github.com/goauthentik/authentik/pkgs/container/server
    container_name: authentik-worker
    hostname: authentik-worker
    command: worker
    depends_on:
      authentik:
          condition: service_healthy
      authentik-cache:
          condition: service_healthy
      authentik-db:
          condition: service_healthy
    environment:
      # Base config
      TZ: "${TIMEZONE:?Timezone missing}"
      # Database/cache config
      AUTHENTIK_REDIS__HOST: authentik-cache
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__NAME: "${AUTHENTIK_DB_NAME:?[authentik-worker] Database name missing}"
      AUTHENTIK_POSTGRESQL__PASSWORD: "${AUTHENTIK_DB_PASSWORD:?[authentik-worker] Database password missing}"
      AUTHENTIK_POSTGRESQL__PORT: "${AUTHENTIK_DB_PORT:?[authentik-worker] Database port missing}"
      AUTHENTIK_POSTGRESQL__USER: "${AUTHENTIK_DB_USER?[authentik-worker] Database user missing}"
      # Authentik config
      AUTHENTIK_SECRET_KEY: "${AUTHENTIK_SECRET_KEY:?[authentik-worker] Authentik secret key missing}"
    networks:
      - home_pi
    restart: unless-stopped
    user: "${PUID_ROOT:?User ID missing}:${PGID_ROOT:?Group ID missing}"
    volumes:
      # Persistent volumes
      - ./storage/authentik/media/:/media
      - ./storage/authentik/certs/:/certs
      - ./storage/authentik/templates/:/templates

  # Cache for Authentik
  authentik-cache:
    image: redis:7.2.5-alpine
    container_name: authentik-cache
    hostname: authentik-cache
    command: --save 60 1 --loglevel warning
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 30s
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
    networks:
      - home_pi
    restart: unless-stopped
    user: "${PUID_ROOT:?User ID missing}:${PGID_ROOT:?Group ID missing}"
    volumes:
      # Persistent volumes
      - ./storage/authentik-cache/:/data

  # Database for Authentik
  authentik-db:
    image: postgres:12.19-alpine
    container_name: authentik-db
    hostname: authentik-db
    environment:
      # Base config
      TIMEZONE: "${TIMEZONE:?Timezone missing}"
      # Database config
      PGPORT: "${AUTHENTIK_DB_PORT:?[authentik-db] Database port missing}"
      POSTGRES_DB: "${AUTHENTIK_DB_NAME:?[authentik-db] Database name missing}"
      POSTGRES_PASSWORD: "${AUTHENTIK_DB_PASSWORD:?[authentik-db] Database password missing}"
      POSTGRES_USER: "${AUTHENTIK_DB_USER?[authentik-db] Database user missing}"
      # Next 3 variables needed to avoid "FATAL role 'root' does not exist" error
      PGDATABASE: "${AUTHENTIK_DB_NAME:?[authentik-db] Database name missing}"
      PGPASSWORD: "${AUTHENTIK_DB_PASSWORD:?[authentik-db] Database password missing}"
      PGUSER: "${AUTHENTIK_DB_USER?[authentik-db] Database user missing}"
    expose:
      - "${AUTHENTIK_DB_PORT:?[authentik-db] Database port missing}"
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 30s
      test: [ "CMD", "pg_isready", "-d", "db_prod" ]
      timeout: 5s
    networks:
      - home_pi
    restart: unless-stopped
    user: "${PUID_ROOT:?User ID missing}:${PGID_ROOT:?Group ID missing}"
    volumes:
      # Persistent volumes
      - ./storage/authentik-db/:/var/lib/postgresql/data

  # WiFi/LAN network scanner
  netalert:
    build:
      context: .
      dockerfile: docker/netalert/Dockerfile
      args:
        # Docker image versions
        NETALERT_VERSION: "24.5.9" # https://registry.hub.docker.com/r/jokobsk/netalertx/tags
        # Build arguments
        # Email notification config
        NETALERT_GMAIL_ADDRESS: "${NETALERT_GMAIL_ADDRESS:?[netalert] GMail address missing}"
        NETALERT_GMAIL_PASSKEY: "${NETALERT_GMAIL_PASSKEY:?[netalert] GMail passkey missing}"
        ADMIN_EMAIL_ADDRESS: "${ADMIN_EMAIL_ADDRESS:?[netalert] Admin email address missing}"
        # Scanning config
        NETALERT_PRIMARY_SUBNET: "${NETALERT_PRIMARY_SUBNET:?[netalert] Primary subnet missing}"
        # UI config
        DOMAIN_NAME: "${DOMAIN_NAME:?[netalert] Domain name missing}"
    container_name: netalert
    hostname: netalert
    environment:
      # Base config
      TZ: "${TIMEZONE:?Timezone missing}"
      # UI config
      PORT: "${NETALERT_UI_PORT:?[netalert] Port missing}"
    labels:
      # Uptime-Kuma monitor config
      kuma.{{container_name}}.http.name: "NetAlert (Network Scanner)"
      kuma.{{container_name}}.http.url: "${NETALERT_MONITOR_URL:?[netalert] Monitor URL missing}"
    network_mode: host # Cannot be run in bridged mode, as it needs visibility of the network
    expose: # When using 'host' network_mode, published ports using 'ports' are discarded. We just 'expose' the new port in case we change the default
      - "${NETALERT_UI_PORT:?[netalert] Port missing}"
    restart: unless-stopped
    user: "${PUID_ROOT:?User ID missing}:${PGID_ROOT:?Group ID missing}"
    volumes:
      # Persistent volumes
      - ./storage/netalert/config/:/app/config
      - ./storage/netalert/db/:/app/db
